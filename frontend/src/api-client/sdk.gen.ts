// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetOpenApiData, GetOpenApiResponses, GetDeviceListData, GetDeviceListResponses, GetDeviceListErrors, CreateDeviceData, CreateDeviceResponses, CreateDeviceErrors, GetDeviceByIdData, GetDeviceByIdResponses, GetDeviceByIdErrors, DeviceSubmitEventData, DeviceSubmitEventResponses, DeviceSubmitEventErrors, DeviceCallbackData, DeviceCallbackResponses, DeviceCallbackErrors, GetSetupListData, GetSetupListResponses, GetSetupListErrors, GetSetupByIdData, GetSetupByIdResponses, GetSetupByIdErrors, GetSmartContractListData, GetSmartContractListResponses, GetSmartContractListErrors, CreateSmartContractData, CreateSmartContractResponses, CreateSmartContractErrors, GetSmartContractByIdData, GetSmartContractByIdResponses, GetSmartContractByIdErrors, SmartContractContractDeploymentCallbackData, SmartContractContractDeploymentCallbackResponses, SmartContractContractDeploymentCallbackErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getOpenApi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOpenApiResponses, unknown, ThrowOnError>({
        url: '/npl/iot_steering/-/openapi.json',
        ...options
    });
};

export const getDeviceList = <ThrowOnError extends boolean = false>(options?: Options<GetDeviceListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDeviceListResponses, GetDeviceListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/Device/',
        ...options
    });
};

export const createDevice = <ThrowOnError extends boolean = false>(options: Options<CreateDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDeviceResponses, CreateDeviceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/Device/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDeviceById = <ThrowOnError extends boolean = false>(options: Options<GetDeviceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDeviceByIdResponses, GetDeviceByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/Device/{id}/',
        ...options
    });
};

export const deviceSubmitEvent = <ThrowOnError extends boolean = false>(options: Options<DeviceSubmitEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeviceSubmitEventResponses, DeviceSubmitEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/Device/{id}/submitEvent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deviceCallback = <ThrowOnError extends boolean = false>(options: Options<DeviceCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeviceCallbackResponses, DeviceCallbackErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/Device/{id}/callback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getSetupList = <ThrowOnError extends boolean = false>(options?: Options<GetSetupListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSetupListResponses, GetSetupListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/Setup/',
        ...options
    });
};

export const getSetupById = <ThrowOnError extends boolean = false>(options: Options<GetSetupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSetupByIdResponses, GetSetupByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/Setup/{id}/',
        ...options
    });
};

export const getSmartContractList = <ThrowOnError extends boolean = false>(options?: Options<GetSmartContractListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSmartContractListResponses, GetSmartContractListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/SmartContract/',
        ...options
    });
};

export const createSmartContract = <ThrowOnError extends boolean = false>(options: Options<CreateSmartContractData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSmartContractResponses, CreateSmartContractErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/SmartContract/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getSmartContractById = <ThrowOnError extends boolean = false>(options: Options<GetSmartContractByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSmartContractByIdResponses, GetSmartContractByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/SmartContract/{id}/',
        ...options
    });
};

export const smartContractContractDeploymentCallback = <ThrowOnError extends boolean = false>(options: Options<SmartContractContractDeploymentCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SmartContractContractDeploymentCallbackResponses, SmartContractContractDeploymentCallbackErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/npl/iot_steering/SmartContract/{id}/contractDeploymentCallback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};